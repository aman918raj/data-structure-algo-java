package binaryTree;

class DepthFirstSearch {

    public static void preOrderTraversal(Node node) {
        if (node == null) {
            return;
        }

        System.out.println(node.data);

        if (node.left != null) {
            preOrderTraversal(node.left);
        }
        if (node.right != null) {
            preOrderTraversal(node.right);
        }
    }

    public static void postOrderTraversal(Node node) {
        if (node == null) {
            return;
        }

        if (node.left != null) {
            postOrderTraversal(node.left);
        }
        if (node.right != null) {
            postOrderTraversal(node.right);
        }
        System.out.println(node.data);
    }

    public static void inOrderTraversal(Node node) {
        if (node == null) {
            return;
        }

        if (node.left != null) {
            inOrderTraversal(node.left);
        }

        System.out.println(node.data);

        if (node.right != null) {
            inOrderTraversal(node.right);
        }
    }

    public static void treeTraversal(BinaryTree tree) {
        preOrderTraversal(tree.root);
        postOrderTraversal(tree.root);
        inOrderTraversal(tree.root);
    }

    public static void main(String[] args) {
        BinaryTree bt = new BinaryTree();
        bt.root = new Node(1);

        bt.root.left = new Node(2);
        bt.root.right = new Node(3);

        bt.root.left.left = new Node(4);
        bt.root.left.right = new Node(5);

        bt.root.right.left = new Node(6);
        bt.root.right.right = new Node(7);

        treeTraversal(bt);

    }

}
